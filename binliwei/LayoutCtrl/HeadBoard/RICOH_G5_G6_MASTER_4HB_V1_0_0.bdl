-- 2018.04.04 Test OK!
-- id,name,support max heads,Heat channels,Temperature channels,Voltage channels,
-- #define HEAD_BOARD_TYPE_RICOH_GEN5_4H	  39 

-- id,name,maxsupportHeads,heatchannels per head,temperturechannels per head,voltagechannels per head,half voltagechannels per head
function GetHeadBoardParam()
	return  80,"Rico h_Gen6",4,1,1,4,0;
end

function GetSupportHeadCount()
	return 2;
end

function GetNozzleLineElecDir(nzlID)
	return 1;	
end

function GetSupportHeadList()
	return "Ricoh_Gen5","Ricoh_Gen6";
end

-- only a heatchannel per junction 
-- hbId: headboard ID,jId: junction ID,id: NozzleLine index in head,hbs: headboard number
function GetHeatChannel(hbId,jId,id,hbs)
	return hbId*4+jId;
end

-- only a temperturechannel per junction
function GetTempertureChannel(hbId,jId,id,hbs)
	return  hbId*4+jId;
end

-- headId*junctions*nozzlelines + junctionId*nozzlelines + nozzlelineId
function GetDataChannel(hbId,jId,id,hbs,bReverse)
	if bReverse == 0 then
		return hbId*16+jId*4+3-id;
	else
		return hbId*16+jId*4+id;
	end
end

function GetVoltageChannel(hbId,jId,id,hbs)
	--if bReverse == 0 then	
         	--return hbId*16+jId*4 +id;
                  return hbId*4+jId;	
end

function GetConnector(dataChn,hbs)
	local hbId;
	local jId;
	hbId = math.floor(dataChn/16);
	jId = math.floor((dataChn - hbId*16)/4);
	return hbId,jId;
end

-- left,top,width,heigth,print head center as origin
function GetHeadBoardIDRect()
	local s = 10.0;
	return  -10*s,15*s,20*s,6*s;
end

-- left,top,width,heigth,print head center as origin
function GetJunctionIDRect()
	local s = 10.0;
	return  -10*s,20*s,20*s,6*s;
end

function GetJunctionInfo()

	return 244,58,    -- w,h
		   970,800, "J19",
                   215,800,"J20",
		   970,710, "J21",
		   215,710, "J22";
		   
end

function DrawJunction(headboardId,jId)
	local s = 10.0;
	local h = 1.6*s;
	local w = 5*s;
	local x,y;
	local str = tostring(headboardId+1).. tostring("-")..tostring(jId+1);
	
	
	SetBrushColor(0x846019);
	FillRectangle(-10*s,14*s,15*s,20*s);
	SetPenColor(0x40ABE3);
	--DrawThermometer(1*s,1.5*s,4*s,-7*s,17*s,0.5*s);

	--[[
	SetFontSize(3*s);
	SetFontColor(0x40ABE3);
	DrawString("C",-5.5*s,15.5*s,6*s,10*s);

	SetFontSize(8*s);
	SetFontColor(0x04FFFF);
	DrawString("40",-8*s,15.5*s,22*s,15*s);

	SetPenWidth(6);
	SetPenColor(0x04FFFF);
	--DrawCircle(7*s,17*s,1*s,1*s);

	SetFontSize(3.5*s);
	SetFontColor(0xF7BA42);
	DrawString("Set",-8*s,24*s,16*s,10*s);
	DrawString("45",1*s,24*s,10*s,10*s);
	SetPenColor(0xF7BA42);
	SetPenWidth(2);
]]--
	
	SetPenColor(0x0);
	DrawHeadBoardOutLine(-10*s,16*s,20*s,12*s,2*s);
	SetBrushColor(0x0);

	for i = 0,3,1 do
		if(i==0 or i==2) 
			then x = 2*s
			else x = -8*s
		end
		if( i<2)
			then y = 23*s + h*1.2;
			else y = 23*s;
		end
		
		if( i==jId )
			then 
				FillRectangle(x,y,h,w);
			else
				--DrawLine(x,y+h/2,x+w,y+h/2);
				DrawRectangle(x,y,h,w);
		end

	end

	SetFontSize(7.5*s);
	SetFontFamily("Arial");	
	DrawString(str,-11*s,15.5*s,22*s,15*s);
	
	return 1;

end

function DrawTemperature(set,get)
	local s = 10.0;
	local h = 1.6*s;
	local w = 5*s;
	local x,y;
	local strSet = tostring(set);
	local strGet = tostring(get);
	
	--
	SetBrushColor(0x846019);
	FillRectangle(-10*s,14*s,15*s,20*s);
	SetPenColor(0x40ABE3);
	DrawThermometer(1*s,1.5*s,4*s,-7*s,17*s,0.5*s);

	SetFontSize(3*s);
	SetFontColor(0x40ABE3);
	DrawString("C",-5.5*s,15.5*s,6*s,10*s);

	SetFontSize(8*s);
	SetFontColor(0x04FFFF);
	DrawString(strGet,-8*s,15.5*s,22*s,15*s);

	SetFontSize(3.5*s);
	SetFontColor(0xF7BA42);
	DrawString("Set",-8*s,24*s,16*s,10*s);
	DrawString(strSet,1*s,24*s,10*s,10*s);

	return 1;

end