-- 
-- id,name,support max heads,Heat channels,Temperature channels,Voltage channels,
-- #define HEAD_BOARD_TYPE_KYOCERA_4HEAD_1H2C	  55 

-- id,name,maxsupportHeads,heatchannels per head,temperturechannels per head,voltagechannels per head,half voltagechannels per head
function GetHeadBoardParam()
	return  55,"Konica_M600",4,1,1,4,0;
end

function GetSupportHeadCount()
	return 1;
end

function GetSupportHeadList()
	return "Konica_M600";
end

-- only a heatchannel per junction 
-- hbId: headboard ID,jId: junction ID,id: NozzleLine index in head,hbs: headboard number
function GetHeatChannel(hbId,jId,id,hbs)
	return hbId*4+jId;
end

-- only a temperturechannel per junction
function GetTempertureChannel(hbId,jId,id,hbs)
	return  hbId*4+jId;
end

-- headId*junctions*nozzlelines + junctionId*nozzlelines + nozzlelineId
function GetDataChannel(hbId,jId,id,hbs,colorsPerHead)
	local data = 0;
	if(id%2==0)
		then data = (id/2)*16+2 + jId*4 + hbId*128
	else
		data = ((15-id)/2)*16 + jId*4 + hbId*128
	end
	return data
end

function GetNozzleLineElecDir(id)
	if(math.floor((id%16)/8) == 0)
		then return 1
	else
		return 0
	end
end

function GetDataChannel_102(hbId,jId,id,hbs,...)
	local colorsPerHead = select(1,...)
	--local map = {7*hbs*16, 3*hbs*16, 5*hbs*16, 1*hbs*16, 6*hbs*16, 2*hbs*16, 4*hbs*16, 0*hbs*16,  0*hbs*16+2, 4*hbs*16+2, 6*hbs*16+2, 2*hbs*16+2, 1*hbs*16+2, 5*hbs*16+2, 3*hbs*16+2, 7*hbs*16+2}
	
	--if(colorsPerHead == 1)
	--	then return 1,hbId*4+jId; --一头一色,由于内部FPGA 处理, 所有喷头排视为一排处理。
	--else
	--	return 2, map[id+1]+4*(4*hbId+jId), map[id+1]+4*(4*hbId+jId)+1
	--end
	
	--local data = 0;
	--if(id%2==0)
	--	then data = (id/2)*16+2 + jId*4 + hbId*128
	--else
	--	data = ((15-id)/2)*16 + jId*4 + hbId*128
	--end
	--return 2, data, data+1
	
	--local map = {7*hbs*16+2, 3*hbs*16+2, 5*hbs*16+2, 1*hbs*16+2, 0*hbs*16, 4*hbs*16, 2*hbs*16, 6*hbs*16,  6*hbs*16+2, 2*hbs*16+2, 4*hbs*16+2, 0*hbs*16+2, 1*hbs*16, 5*hbs*16, --3*hbs*16, 7*hbs*16}
	local map = {0*hbs*16, 2*hbs*16, 4*hbs*16, 6*hbs*16, 1*hbs*16, 3*hbs*16, 5*hbs*16, 7*hbs*16,  7*hbs*16+2, 5*hbs*16+2, 3*hbs*16+2, 1*hbs*16+2, 6*hbs*16+2, 4*hbs*16+2, 2*hbs*16+2, 0*hbs*16+2}
	return 2, map[id+1]+4*(4*hbId+jId), map[id+1]+4*(4*hbId+jId)+1
end

-- note: different from datachannel
function GetVoltageChannel(hbId,jId,id,hbs)
        return hbId*4+jId;
end

function GetConnector(dataChn,hbs)
	local hbId;
	local jId;
	hbId = math.floor(dataChn/16);
	jId = math.floor((dataChn - hbId*16)/8);
	return hbId,jId;
end

-- left,top,width,heigth,print head center as origin
function GetHeadBoardIDRect()
	local s = 10.0;
	return  -12*s,20*s,24*s,7*s;
end

-- left,top,width,heigth,print head center as origin
function GetJunctionIDRect()
	local s = 10.0;
	return  -12*s,27*s,24*s,7*s;
end

function GetJunctionInfo()

	return 120,30,    -- w,h
		   654,585 ,"J1",
		   482,585, "J2",
		   312,585, "J3",
		   145,585, "J4";	   
end

function DrawJunction(headboardId,jId)
	local s = 10.0;
	local h = 1.2*s;
	local w = 3*s;
	local space = w/2;
	local x,y;
	local str = tostring(headboardId+1).. tostring("-")..tostring(jId+1);
	
	--
	SetBrushColor(0xFFFFFF);
	--SetBrushColor(0x0);
	FillRectangle(-10*s,10*s,12*s,20*s);

	local bw = 10*s;
	local bh = 12*s;
	local bh0 = 10*s;
	
	SetPenColor(0x0);
	DrawHeadBoardOutLine(-bw,bh0,bw*2,bh,2*s);	
	SetBrushColor(0x0);

	for i = 0,3,1 do
		x = w+space*1.5 - (w+space)*i;
		y = 19*s;
				
		if( i==jId )
			then 
				FillRectangle(x,y,h,w);
			else
				--DrawLine(x,y+h/2,x+w,y+h/2);
				DrawRectangle(x,y,h,w);
		end

	end

	SetFontSize(7*s);
	SetFontFamily("Arial");	
	DrawString(str,-11*s,bh0,22*s,15*s);
	
	return 1;

end